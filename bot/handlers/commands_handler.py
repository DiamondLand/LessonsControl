from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.utils.markdown import hlink

from database.services import get_or_create_user_service

from functions.greeting import send_greeting
from functions.mailing import send_check_for_users

from elements.inline.other_inline import support_button
from elements.keybord.kb import cancel_kb
from events.states_group import Utils, Registration
from config.advertisement import support_link

router = Router()


# --- –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å --- #
@router.message(Command("start", "registration"))
async def start_cmd(message: Message, state: FSMContext):
    user_data = await get_or_create_user_service(
        user_id=message.from_user.id
    )
    if user_data and user_data.firstname and user_data.lastname:
        return await message.answer(
            text=f"{send_greeting(username=user_data.firstname)}\
                \n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ø—Ä–æ–≤–µ–¥—ë—Ç –ø–µ—Ä–µ–∫–ª–∏—á–∫—É —á–µ—Ä–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π, –Ω–µ —Ç–µ—Ä—è–π—Ç–µ—Å—å üí§!"
            )
    await message.answer(
        text=f"{send_greeting(username=message.from_user.first_name)}\
            \n–î–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å <b>–∏–º—è</b> –∏ <b>—Ñ–∞–º–∏–ª–∏—é</b>, —Ä–∞–∑–¥–µ–ª—è—è –ø—Ä–æ–±–µ–ª–æ–º:\
            \n\n<i>‚ùó –ò–∑–º–µ–Ω–∏—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥–µ—Ç –Ω–µ–ª—å–∑—è. –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å—ë –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ ‚ùó</i>",
        reply_markup=cancel_kb()
    )
    await state.set_state(state=Registration.name_lastname)


# --- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å --- #
@router.message(Command("info"))
async def info_cmd(message: Message, state: FSMContext):
    # –ï—Å–ª–∏ —Å—Ç–∞–¥–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –Ω–µ—ë
    await send_check_for_users(message.bot)
    if await state.get_state() is not None:
        await message.answer(
            text="üîé‚ú®",
        )
        await state.clear()

    botname = message.bot.config['SETTINGS']['name']
    message_text = (
        f"<b>–°–ü–†–ê–í–ö–ê {hlink(botname, support_link)} v{message.bot.config['SETTINGS']['version']}:</b>"
        f"\n\n –ß—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±–æ—Ç–∞, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ <b>{hlink('–≥—Ä—É–ø–ø–µ', support_link)}</b> –∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ –Ω—É–∂–Ω–æ–º —Ç–æ–ø–∏–∫–µ."
    )

    await message.answer(
        text=message_text,
        reply_markup=support_button().as_markup()
    )


# --- –ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞—Å—Å—ã–ª–∫—É -> –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç --- #
@router.message(Command("mailing", "bin2"))
async def mailing_cmd(message: Message, state: FSMContext):
    if int(message.chat.id) in map(int, message.bot.ADMIN_GROUP):
        # –ï—Å–ª–∏ —Å—Ç–∞–¥–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –Ω–µ—ë
        if await state.get_state() is not None:
            await state.clear()

        await message.answer(
            text="üí• –í–≤–µ–¥–∏—Ç–µ <u>—Ç–µ–∫—Å—Ç</u> –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ <u>–º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç</u>, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:", 
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(Utils.mailing)
